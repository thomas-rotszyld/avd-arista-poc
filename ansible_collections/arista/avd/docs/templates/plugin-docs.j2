{#
 Copyright (c) 2023 Arista Networks, Inc.
 Use of this source code is governed by the Apache License 2.0
 that can be found in the LICENSE file.
#}
{# Based on https://github.com/xlab-steampunk/ansible-doc-extractor/blob/master/src/ansible_doc_extractor/templates/module.md.j2 #}
---
# This title is used for search results
title: {{ collection | default("arista.avd", true) ~ "." ~ module }}
---
<!--
  ~ Copyright (c) 2023 Arista Networks, Inc.
  ~ Use of this source code is governed by the Apache License 2.0
  ~ that can be found in the LICENSE file.
  -->

{% macro option_desc(opts, level) %}
{%     if not level %}
| Argument | Type | Required | Default | Value Restrictions | Description |
| -------- | ---- | -------- | ------- | ------------------ | ----------- |
{%     endif %}
{%     for name, spec in opts.items() %}
{%         set req = spec.required | default("optional") %}
{%         set typ = spec.type | default("any") %}
{%         set def_val = spec.default | default("None") %}
{%         set restrictions = [] %}
{%         if spec.choices %}
{%             set _ = restrictions.append("Valid values:") %}
{%             for choice in spec.choices %}
{%                 set _ = restrictions.append ("- <code>" ~ choice ~ "</code>") %}
{%             endfor %}
{%         endif %}
{%         if spec.min %}
{%             set _ = restrictions.append("Min value: <code>" ~ spec.min ~ "</code>") %}
{%         endif %}
{%         if spec.max %}
{%             set _ = restrictions.append("Max value: <code>" ~ spec.max ~ "</code>") %}
{%         endif %}
{%         set description = spec.description | map("md_ify") | map("replace", "\.", ".") | map("replace", "\,", ",") | join("<br>") %}
| {{ "    " * level }}{{ name }} | {{ typ }} | {{ req }} | {{ def_val }} | {{ restrictions | join("<br>") }} | {{ description }} |
{%         if spec.suboptions %}
{{ option_desc(spec.suboptions, level + 1) -}}
{%         endif %}
{%     endfor %}
{% endmacro %}
{% macro result_desc(results, level) %}
{%     if not level %}
| Name | Type | Description |
| ---- | ---- | ----------- |
{%     endif %}
{%     for name, spec in results.items() %}
{%         set typ = spec.type | default("any") %}
{%         set description = spec.description | map("md_ify") | map("replace", "\.", ".") | map("replace", "\,", ",") | join("<br>") %}
| {{ "    " * level }}{{ name }} | {{ typ }} | {{ description }} |
{%         if spec.contains %}
{{ result_desc(spec.contains, level + 1) -}}
{%         endif %}
{%     endfor %}
{% endmacro %}
# {{ module }}

!!! note
    Always use the FQCN (Fully Qualified Collection Name) `{{ collection | default("arista.avd", true) ~ "." ~ module }}` when using this plugin.
{% if deprecated %}

!!! danger "This plugin is **deprecated**"
    This {{ plugin_type }} will be removed in version {{ deprecated['removed_in'] | default('') | string | md_ify | replace("\.", ".") | replace("\,", ",") }}.

{% else %}
{%     set module_states = {
     "preview": {"message": "not guaranteed to have a backwards compatible interface", "level": "warning"},
     "stableinterface": {"message": "guaranteed to have backward compatible interface changes going forward", "level": "info"},
   }
%}
{%     if metadata %}
{%         if metadata.status %}

{%             for cur_state in metadata.status %}
!!! {{ module_states[cur_state]["level"] }} "This module is in **{{ cur_state }}** mode"
    This {{ plugin_type }} is {{ module_states[cur_state]["message"] }}.
{%             endfor %}
{%         endif %}
{%     endif %}
{% endif %}
{% if short_description %}

{{ short_description | md_ify | replace("\.", ".") | replace("\,", ",") }}
{% endif %}
{% if description %}

## Synopsis
{%     for desc in description %}

{{ desc | md_ify | replace("\.", ".") | replace("\,", ",") }}
{%     endfor %}
{% endif %}
{% if requirements %}

## Requirements

The below requirements are needed on the host that executes this module.

{%     for req in requirements %}
- {{ req | md_ify | replace("\.", ".") | replace("\,", ",") }}
{%     endfor %}
{% endif %}
{% if options %}

## Parameters

{{ option_desc(options, 0) -}}
{% endif %}
{% if notes %}

## Notes

{%     for note in notes %}
- {{ note | md_ify | replace("\.", ".") | replace("\,", ",") }}
{%     endfor %}
{% endif %}
{% if seealso %}

## See Also

{%     for item in seealso %}
{%         if item.module is defined and item.description is defined %}
- :ref:`{{ item.module }}_module<br>{{ item.description | md_ify | replace("\.", ".") | replace("\,", ",") }}
{%         elif item.module is defined %}
- :ref:`{{ item.module }}_module`<br>The official documentation on the **{{ item.module }}** module.
{%         elif item.name is defined and item.link is defined and item.description is defined %}
- {{ item.name }}: [{{ item.link }}]({{ item.link }})<br>{{ item.description | md_ify | replace("\.", ".") | replace("\,", ",") }}
{%         elif item.ref is defined and item.description is defined %}
- :ref:`{{ item.ref }}`<br>{{ item.description | md_ify | replace("\.", ".") | replace("\,", ",") }}
{%         endif %}
{%     endfor %}
{% endif %}
{% if examples %}

## Examples

```yaml
{{ examples | trim }}
```
{% endif %}
{% if returndocs %}

## Return Values

{{ result_desc(returndocs, 0) -}}
{% endif %}
{% if author is defined %}

## Authors

{%     for author_name in author %}
- {{ author_name }}
{%     endfor %}
{% endif %}
